import nf from '..';

describe('compact notation', () => {
	it.each([
		['0a', '123', 123],
		['0a', '1K', 1_234],
		['0a', '12K', 12_345],
		['0a', '123K', 123_456],
		['0a', '1M', 1_234_567],
		['0a', '12M', 12_345_678],
		['0a', '123M', 123_456_789],
		['0a', '1B', 1_234_567_890],
		['0a', '12B', 12_345_678_901],
		['0a', '123B', 123_456_789_012],
		['0a', '1T', 1_234_567_890_123],
		['0a', '12T', 12_345_678_901_234],
		['0a', '123T', 123_456_789_012_345],
		['0.0a', '1.2M', 1_234_567],
		['0.00a', '1.23M', 1_234_567],
		['0.000a', '1.235M', 1_234_567],
		['0.000a', '1.235M', 1_234_567],
	])('short format: %s, %s', (format, expected, value) => {
		const result = nf(value, format);
		expect(result).toBe(expected);
	});

	it.each([
		['0A', '1', 1],
		['0A', '123', 123],
		['0A', '1 thousand', 1_234],
		['0A', '12 thousand', 12_345],
		['0A', '123 thousand', 123_456],
		['0A', '1 million', 1_234_567],
		['0A', '12 million', 12_345_678],
		['0A', '123 million', 123_456_789],
		['0A', '1 billion', 1_234_567_890],
		['0A', '12 billion', 12_345_678_901],
		['0A', '123 billion', 123_456_789_012],
		['0A', '1 trillion', 1_234_567_890_123],
		['0A', '12 trillion', 12_345_678_901_234],
		['0A', '123 trillion', 123_456_789_012_345],
		['0.0A', '1.2 million', 1_234_567],
		['0.00A', '1.23 million', 1_234_567],
	])('long format: %s, %s', (format, expected, value) => {
		const result = nf(value, format);
		expect(result).toBe(expected);
	});
});
