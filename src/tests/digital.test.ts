import numberfmt from '..';

describe('digital', () => {
  it.each([
    ['0b', '1bit', 1],
    ['0b', '1kb', 1024],
    ['0b', '1.49kb', 1024 + 500],
    ['0b', '1.02kb', 1024 + 20],
    ['0b', '23.39kb', 1024 * 23 + 400],
    ['0b', '1Mb', 1024 * 1024],
    ['0b', '1Gb', 1024 * 1024 * 1024],
    ['0b', '1Tb', 1024 * 1024 * 1024 * 1024],
    ['0 b', '1 bit', 1],
    ['0 b', '1 kb', 1024],
    ['0 b', '1.49 kb', 1024 + 500],
    ['0 b', '1.02 kb', 1024 + 20],
    ['0 b', '23.39 kb', 1024 * 23 + 400],
    ['0 b', '1 Mb', 1024 * 1024],
    ['0 b', '1 Gb', 1024 * 1024 * 1024],
    ['0 b', '1 Tb', 1024 * 1024 * 1024 * 1024],
    ['0b', '120.56kb', 123456],
  ])('bits: %s = %s', (format, expected, value) => {
    const result = numberfmt(value, format);
    expect(result).toBe(expected);
  });

  it.each([
    ['0B', '1B', 1],
    ['0B', '1kB', 1024],
    ['0B', '1.49kB', 1024 + 500],
    ['0B', '1.02kB', 1024 + 20],
    ['0B', '23.39kB', 1024 * 23 + 400],
    ['0B', '1MB', 1024 * 1024],
    ['0B', '1GB', 1024 * 1024 * 1024],
    ['0B', '1TB', 1024 * 1024 * 1024 * 1024],
    ['0 B', '1 byte', 1],
    ['0 B', '1 kB', 1024],
    ['0 B', '1.49 kB', 1024 + 500],
    ['0 B', '1.02 kB', 1024 + 20],
    ['0 B', '23.39 kB', 1024 * 23 + 400],
    ['0 B', '1 MB', 1024 * 1024],
    ['0 B', '1 GB', 1024 * 1024 * 1024],
    ['0 B', '1 TB', 1024 * 1024 * 1024 * 1024],
  ])('bytes: %s = %s', (format, expected, value) => {
    const result = numberfmt(value, format);
    expect(result).toBe(expected);
  });
});
